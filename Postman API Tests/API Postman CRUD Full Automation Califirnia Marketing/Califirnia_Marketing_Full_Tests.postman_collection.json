{
	"info": {
		"_postman_id": "ea0153e2-52e8-4809-aa62-325f1b18f86d",
		"name": "Califirnia Marketing Full Tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "31163499"
	},
	"item": [
		{
			"name": "Add new address",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Status code - 200",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"// Code 200 with if -else",
							"if (responseCode.code === 200){",
							"    tests[\"Backend is available, response code is 200\"] = true;",
							"} else if  (responseCode.code === 401){",
							"    tests[\"Not authorised, check access token or Log in\"] = false;",
							"} else if (responseCode.code === 403){",
							"    tests[\"Forbiden\"] = false;",
							"} else if (responseCode.code === 404){",
							"    tests[\"Not Found. Check if you made correct request\"] = false;",
							"} else if (responseCode.code === 422){",
							"    tests[\"He instance is not valid\"] = false;",
							"} else {",
							"    tests[\"Semething went wrong. Check response body\"] = false;",
							"}",
							"// Code 200 with switch",
							"switch(responseCode.code){",
							"    case 200:",
							"        tests[\"200 ok. The request has succeeded\"] = true;",
							"        break;",
							"    case 404:",
							"        tests[\"404 Not found\"] = false;",
							"        break;",
							"    case 400:",
							"        tests[\"400 Bad Request\"] = false;",
							"        break;",
							"    case 401:",
							"        tests[\"401 BUnauthorized\"] = false;",
							"        break;",
							"    case 500:",
							"        tests[\"500 Internal Server Error\"] = false;",
							"        break;",
							"    case 503:",
							"        tests[\"503 Server unavailable\"] = false;",
							"        break;",
							"    case 502:",
							"        tests[\"502 bad gateway\"] = false;",
							"        break;",
							"    case 599:",
							"        tests[\"599 Network connect timeout error\"] = false;",
							"        break",
							"    case 408:",
							"        tests[\"408 Request is timeout\"] = false",
							"        break;",
							"    default:",
							"        tests[\"Sorry, we are out of\" + responseCode] = false;",
							"}",
							"// Code 200",
							"tests[\"Response code is 200 OK\"] = responseCode.code === 200;",
							"// Status code is 200 or 201 or 202",
							"pm.test(\"Successful POST request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);",
							"});",
							"// Code 200 + Ok + code json",
							"pm.test(\"Status code is 200, OK, json\", function () {",
							"    pm.response.to.have.status(200);",
							"    pm.response.to.be.ok;",
							"    pm.response.to.be.json;",
							"});",
							"// Response time < 1000ms",
							"pm.test(\"Response time is less than 1000ms\", function () {",
							"  pm.expect(pm.response.responseTime).to.be.below(1000);",
							"});",
							"// Response size < 2000B",
							"pm.test(\"Response size is less than 2000B\", function () {",
							"    pm.expect(pm.response.responseSize).to.be.below(2000);",
							"});",
							"// Takes id from body (забирает ID с ответа в body)",
							"var jsonData = JSON.parse(responseBody);",
							"postman.setEnvironmentVariable(\"id\", jsonData.id)",
							"// Checking full ID compliance (Полное соответствие ID)",
							"pm.test(\"ID is correct\", function () {",
							"    pm.expect(jsonData.id).to.eql(pm.environment.get(\"id\"));",
							"});",
							"// Checking partial ID matches (Проверяем частичное соответсвие ID)",
							"pm.test(\"Body contains string ID\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"id\");",
							"});",
							"// Response not to be error, to be withBody, not jsonBody Error",
							"pm.test(\"Response should be okay to process\", function () {",
							"    pm.response.to.not.be.error;",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.not.have.jsonBody(\"error\")",
							"});",
							"// Test Headers",
							"pm.test(\"Header is correct\", function () {",
							"    pm.response.to.have.header(\"content-type\", \"application/json;charset=utf-8\");",
							"    pm.response.to.have.header(\"x-content-type-options\", \"nosniff\");",
							"    pm.response.to.have.header(\"server\", \"Pepyaka/1.21.6\");",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.environment.clear();",
							"pm.environment.unset(\"id\");",
							"pm.environment.unset(\"company\");",
							"pm.environment.unset(\"zipCode\");",
							"pm.environment.unset(\"addressLine1\");",
							"pm.environment.unset(\"addressLine2\");",
							"pm.environment.unset(\"firstName\");",
							"pm.environment.unset(\"lastName\");",
							"pm.environment.unset(\"city\");",
							"pm.environment.unset(\"country\");",
							"pm.environment.unset(\"phoneNumber\");",
							"pm.environment.unset(\"subdivision\");",
							"",
							"// return a random integer from 10000 to 90000 with 5 digits",
							"pm.environment.set(\"zipCode\", Math.floor(Math.random() * 90000) + 10000);",
							"// return a random integer from 100 to 900 with 3 digits",
							"pm.environment.set(\"addressLine2\", Math.floor(Math.random() * 900) + 100);",
							"// States abbreviations",
							"const stateAbbreviations = [ \"AL\", \"AK\", \"AS\", \"AZ\", \"AR\", \"CA\", \"CO\", \"CT\", \"DE\", \"DC\", \"FM\", \"FL\", \"GA\", \"GU\", \"HI\", \"ID\", \"IL\", \"IN\", \"IA\", \"KS\", \"KY\", \"LA\", \"ME\", \"MH\", \"MD\", \"MD\", \"MA\", \"MI\", \"MN\", \"MS\", \"MO\", \"MT\", \"NE\", \"NV\", \"NH\", \"NJ\", \"NM\", \"NY\", \"NC\", \"ND\", \"MP\", \"OH\", \"OK\", \"OR\", \"PW\", \"PA\", \"PR\", \"RI\", \"SC\", \"SD\", \"TN\", \"TX\", \"UT\", \"VT\", \"VI\", \"VA\", \"WA\", \"WV\", \"WI\", \"WY\" ",
							"];",
							"// Random State",
							"const randomState = stateAbbreviations[Math.floor(Math.random() * stateAbbreviations.length)];",
							"pm.environment.set(\"subdivision\", randomState);",
							"// Random name, company, address, city, country, phonenumber",
							"// Using Faker lib:",
							"// https://learning.postman.com/docs/writing-scripts/script-references/variables-list/",
							"let fName = pm.variables.replaceIn(\"{{$randomFirstName}}\");",
							"pm.environment.set(\"firstName\", fName);",
							"let lName = pm.variables.replaceIn(\"{{$randomLastName}}\");",
							"pm.environment.set(\"lastName\", lName);",
							"let comp = pm.variables.replaceIn(\"{{$randomCompanyName}}\");",
							"pm.environment.set(\"company\", comp);",
							"let addrL1 = pm.variables.replaceIn(\"{{$randomStreetAddress}}\");",
							"pm.environment.set(\"addressLine1\", addrL1);",
							"let cty = pm.variables.replaceIn(\"{{$randomCity}}\");",
							"pm.environment.set(\"city\", cty);",
							"let cntry = pm.variables.replaceIn(\"{{$randomCountry}}\");",
							"pm.environment.set(\"country\", cntry);",
							"let phoneNbr = pm.variables.replaceIn(\"{{$randomPhoneNumber}}\");",
							"pm.environment.set(\"phoneNumber\", phoneNbr);",
							"",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"address\": {\n        \"fullName\": {\n            \"firstName\": \"{{firstName}}\",\n            \"lastName\": \"{{lastName}}\"\n        },\n        \"company\": \"{{company}}\",\n        \"taxInfo\": {\n            \"id\": null,\n            \"type\": null\n        },\n        \"addressLine1\": \"{{addressLine1}}\",\n        \"addressLine2\": \"{{addressLine2}}\",\n        \"street\": {\n            \"name\": null,\n            \"number\": null\n        },\n        \"city\": \"{{city}}\",\n        \"country\": \"{{country}}\",\n        \"subdivision\": \"{{subdivision}}\",\n        \"zipCode\": \"{{zipCode}}\",\n        \"phoneNumber\": \"{{phoneNumber}}\",\n        \"location\": null\n    },\n    \"setAsDefault\": false\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://addresses.wixapps.net/_api/addresses-web/v1/addresses",
					"protocol": "https",
					"host": [
						"addresses",
						"wixapps",
						"net"
					],
					"path": [
						"_api",
						"addresses-web",
						"v1",
						"addresses"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Specific address",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Status code - 200",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"// Code 200 with if -else",
							"if (responseCode.code === 200){",
							"    tests[\"Backend is available, response code is 200\"] = true;",
							"} else if  (responseCode.code === 401){",
							"    tests[\"Not authorised, check access token or Log in\"] = false;",
							"} else if (responseCode.code === 403){",
							"    tests[\"Forbiden\"] = false;",
							"} else if (responseCode.code === 404){",
							"    tests[\"Not Found. Check if you made correct request\"] = false;",
							"} else if (responseCode.code === 422){",
							"    tests[\"He instance is not valid\"] = false;",
							"} else {",
							"    tests[\"Semething went wrong. Check response body\"] = false;",
							"}",
							"// Code 200 with switch",
							"switch(responseCode.code){",
							"    case 200:",
							"        tests[\"200 ok. The request has succeeded\"] = true;",
							"        break;",
							"    case 404:",
							"        tests[\"404 Not found\"] = false;",
							"        break;",
							"    case 400:",
							"        tests[\"400 Bad Request\"] = false;",
							"        break;",
							"    case 401:",
							"        tests[\"401 BUnauthorized\"] = false;",
							"        break;",
							"    case 500:",
							"        tests[\"500 Internal Server Error\"] = false;",
							"        break;",
							"    case 503:",
							"        tests[\"503 Server unavailable\"] = false;",
							"        break;",
							"    case 502:",
							"        tests[\"502 bad gateway\"] = false;",
							"        break;",
							"    case 599:",
							"        tests[\"599 Network connect timeout error\"] = false;",
							"        break",
							"    case 408:",
							"        tests[\"408 Request is timeout\"] = false",
							"        break;",
							"    default:",
							"        tests[\"Sorry, we are out of\" + responseCode] = false;",
							"}",
							"// Code 200",
							"tests[\"Response code is 200 OK\"] = responseCode.code === 200;",
							"// Status code is 200 or 201 or 202",
							"pm.test(\"Successful POST request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);",
							"});",
							"// Code 200 + Ok + code json",
							"pm.test(\"Status code is 200, OK, json\", function () {",
							"    pm.response.to.have.status(200);",
							"    pm.response.to.be.ok;",
							"    pm.response.to.be.json;",
							"});",
							"// Response time < 1000ms",
							"pm.test(\"Response time is less than 1000ms\", function () {",
							"  pm.expect(pm.response.responseTime).to.be.below(1000);",
							"});",
							"// Response size < 2000B",
							"pm.test(\"Response size is less than 2000B\", function () {",
							"    pm.expect(pm.response.responseSize).to.be.below(2000);",
							"});",
							"// Status code is 200, OK, and response is JSON",
							"pm.test(\"Status code is 200, OK, and response is JSON\", function () {",
							"    pm.response.to.have.status(200);",
							"    pm.response.to.be.ok;",
							"    pm.response.to.be.json;",
							"});",
							"// Response should be okay to process",
							"pm.test(\"Response should be okay to process\", function () {",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"    pm.response.to.not.be.error;",
							"    pm.response.to.not.have.jsonBody(\"error\");",
							"});",
							"// ID Partial match",
							"pm.test(\"New ID is in response\", function () {",
							"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"id\"));",
							"});",
							"// Full ID match",
							"pm.test(\"ID is correct\", function () {",
							"    let jsonData = pm.response.json();",
							"    pm.expect(jsonData.address.id).to.eql(pm.environment.get(\"id\"));",
							"});",
							"// Response body should be in the correct format",
							"pm.test(\"Response body should be in the correct format\", function () {",
							"    let jsonData = pm.response.json();",
							"    pm.expect(jsonData.address).to.be.a(\"object\");",
							"    pm.expect(jsonData.address.id).to.be.a(\"string\");",
							"    pm.expect(jsonData.address.fullName).to.be.a(\"object\");",
							"    pm.expect(jsonData.address.fullName.firstName).to.be.a(\"string\");",
							"    pm.expect(jsonData.address.fullName.lastName).to.be.a(\"string\");",
							"    pm.expect(jsonData.address.country).to.be.a(\"string\");",
							"    pm.expect(jsonData.address.subdivision).to.be.a(\"string\");",
							"    pm.expect(jsonData.address.city).to.be.a(\"string\");",
							"    pm.expect(jsonData.address.zipCode).to.be.a(\"string\");",
							"    pm.expect(jsonData.address.phoneNumber).to.be.a(\"string\");",
							"    pm.expect(jsonData.address.company).to.be.a(\"string\");",
							"    pm.expect(jsonData.address.addressLine1).to.be.a(\"string\");",
							"    pm.expect(jsonData.address.addressLine2).to.be.a(\"string\");",
							"});",
							"// Full body Keys/Values. Entire response is correct",
							"pm.test(\"Entire response is correct\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData.address.id).to.eql(pm.environment.get(\"id\"));",
							"    pm.expect(jsonData.address.fullName.firstName).to.eql(pm.environment.get(\"firstName\"));",
							"    pm.expect(jsonData.address.fullName.lastName).to.eql(pm.environment.get(\"lastName\"));",
							"    pm.expect(jsonData.address.country).to.eql(pm.environment.get(\"country\"));",
							"    pm.expect(jsonData.address.subdivision).to.eql(pm.environment.get(\"subdivision\"));",
							"    pm.expect(jsonData.address.city).to.eql(pm.environment.get(\"city\"));",
							"    pm.expect(jsonData.address.zipCode).to.eql(\"\" + pm.environment.get(\"zipCode\"));",
							"    pm.expect(jsonData.address.phoneNumber).to.eql(pm.environment.get(\"phoneNumber\"));",
							"    pm.expect(jsonData.address.company).to.eql(pm.environment.get(\"company\"));",
							"    pm.expect(jsonData.address.addressLine1).to.eql(pm.environment.get(\"addressLine1\"));",
							"    pm.expect(jsonData.address.addressLine2).to.eql(\"\" + pm.environment.get(\"addressLine2\"));",
							"});",
							"// Tests Header",
							"pm.test(\"Header is correct\", function () {",
							"    pm.response.to.have.header(\"content-type\", \"application/json;charset=utf-8\");",
							"    pm.response.to.have.header(\"server\", \"Pepyaka/1.21.6\");",
							"    pm.response.to.have.header(\"x-content-type-options\", \"nosniff\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://addresses.wixapps.net/_api/addresses-web/v1/addresses/{{id}}",
					"protocol": "https",
					"host": [
						"addresses",
						"wixapps",
						"net"
					],
					"path": [
						"_api",
						"addresses-web",
						"v1",
						"addresses",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get All addresses",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Status code - 200",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"// Code 200 with if -else",
							"if (responseCode.code === 200){",
							"    tests[\"Backend is available, response code is 200\"] = true;",
							"} else if  (responseCode.code === 401){",
							"    tests[\"Not authorised, check access token or Log in\"] = false;",
							"} else if (responseCode.code === 403){",
							"    tests[\"Forbiden\"] = false;",
							"} else if (responseCode.code === 404){",
							"    tests[\"Not Found. Check if you made correct request\"] = false;",
							"} else if (responseCode.code === 422){",
							"    tests[\"He instance is not valid\"] = false;",
							"} else {",
							"    tests[\"Semething went wrong. Check response body\"] = false;",
							"}",
							"// Code 200 with switch",
							"switch(responseCode.code){",
							"    case 200:",
							"        tests[\"200 ok. The request has succeeded\"] = true;",
							"        break;",
							"    case 404:",
							"        tests[\"404 Not found\"] = false;",
							"        break;",
							"    case 400:",
							"        tests[\"400 Bad Request\"] = false;",
							"        break;",
							"    case 401:",
							"        tests[\"401 BUnauthorized\"] = false;",
							"        break;",
							"    case 500:",
							"        tests[\"500 Internal Server Error\"] = false;",
							"        break;",
							"    case 503:",
							"        tests[\"503 Server unavailable\"] = false;",
							"        break;",
							"    case 502:",
							"        tests[\"502 bad gateway\"] = false;",
							"        break;",
							"    case 599:",
							"        tests[\"599 Network connect timeout error\"] = false;",
							"        break",
							"    case 408:",
							"        tests[\"408 Request is timeout\"] = false",
							"        break;",
							"    default:",
							"        tests[\"Sorry, we are out of\" + responseCode] = false;",
							"}",
							"// Code 200",
							"tests[\"Response code is 200 OK\"] = responseCode.code === 200;",
							"// Status code is 200 or 201 or 202",
							"pm.test(\"Successful POST request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);",
							"});",
							"// Response time < 1000ms",
							"pm.test(\"Response time is less than 1000ms\", function () {",
							"  pm.expect(pm.response.responseTime).to.be.below(1000);",
							"});",
							"// Response size < 2000B",
							"pm.test(\"Response size is less than 2000B\", function () {",
							"    pm.expect(pm.response.responseSize).to.be.below(2000);",
							"});",
							"// Status code is 200, OK, and response is JSON",
							"pm.test(\"Status code is 200, OK, and response is JSON\", function () {",
							"    pm.response.to.have.status(200);",
							"    pm.response.to.be.ok;",
							"    pm.response.to.be.json;",
							"});",
							"// Response should be okay to process",
							"pm.test(\"Response should be okay to process\", function () {",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"    pm.response.to.not.be.error;",
							"    pm.response.to.not.have.jsonBody(\"error\");",
							"});",
							"// ID Partial match",
							"pm.test(\"New ID is in response\", function () {",
							"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"id\"));",
							"});",
							"// Tests Header",
							"pm.test(\"Header is correct\", function () {",
							"    pm.response.to.have.header(\"content-type\", \"application/json;charset=utf-8\");",
							"    pm.response.to.have.header(\"server\", \"Pepyaka/1.21.6\");",
							"    pm.response.to.have.header(\"x-content-type-options\", \"nosniff\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://addresses.wixapps.net/_api/addresses-web/v1/addresses",
					"protocol": "https",
					"host": [
						"addresses",
						"wixapps",
						"net"
					],
					"path": [
						"_api",
						"addresses-web",
						"v1",
						"addresses"
					]
				}
			},
			"response": []
		},
		{
			"name": "Patch address",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// return a random integer from 10000 to 90000 with 5 digits",
							"pm.environment.set(\"zipCode\", Math.floor(Math.random() * 90000) + 10000);",
							"",
							"// return a random integer from 100 to 900 with 3 digits",
							"pm.environment.set(\"addressLine2\", Math.floor(Math.random() * 900) + 100);",
							"",
							"const stateAbbreviations = [ \"AL\", \"AK\", \"AS\", \"AZ\", \"AR\", \"CA\", \"CO\", \"CT\", \"DE\", \"DC\", \"FM\", \"FL\", \"GA\", \"GU\", \"HI\", \"ID\", \"IL\", \"IN\", \"IA\", \"KS\", \"KY\", \"LA\", \"ME\", \"MH\", \"MD\", \"MD\", \"MA\", \"MI\", \"MN\", \"MS\", \"MO\", \"MT\", \"NE\", \"NV\", \"NH\", \"NJ\", \"NM\", \"NY\", \"NC\", \"ND\", \"MP\", \"OH\", \"OK\", \"OR\", \"PW\", \"PA\", \"PR\", \"RI\", \"SC\", \"SD\", \"TN\", \"TX\", \"UT\", \"VT\", \"VI\", \"VA\", \"WA\", \"WV\", \"WI\", \"WY\" ",
							"];",
							"const randomState = stateAbbreviations[Math.floor(Math.random() * stateAbbreviations.length)];",
							"pm.environment.set(\"subdivision\", randomState);",
							"",
							"// Using Faker lib ",
							"//https://learning.postman.com/docs/writing-scripts/script-references/variables-list/",
							"let fName = pm.variables.replaceIn(\"{{$randomFirstName}}\");",
							"pm.environment.set(\"firstName\", fName);",
							"let lName = pm.variables.replaceIn(\"{{$randomLastName}}\");",
							"pm.environment.set(\"lastName\", lName);",
							"let co = pm.variables.replaceIn('{{$randomCompanyName}}')",
							"pm.environment.set(\"company\", co);",
							"let addrLn1 = pm.variables.replaceIn('{{$randomStreetAddress}}')",
							"pm.environment.set(\"addressLine1\", addrLn1);",
							"let cty = pm.variables.replaceIn('{{$randomCity}}')",
							"pm.environment.set(\"city\", cty);",
							"let cntry = pm.variables.replaceIn('{{$randomCountry}}')",
							"pm.environment.set(\"country\", cntry);",
							"let phoneNum = pm.variables.replaceIn('{{$randomPhoneNumber}}')",
							"pm.environment.set(\"phoneNumber\", phoneNum);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Status code - 200",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"// Code 200 with if -else",
							"if (responseCode.code === 200){",
							"    tests[\"Backend is available, response code is 200\"] = true;",
							"} else if  (responseCode.code === 401){",
							"    tests[\"Not authorised, check access token or Log in\"] = false;",
							"} else if (responseCode.code === 403){",
							"    tests[\"Forbiden\"] = false;",
							"} else if (responseCode.code === 404){",
							"    tests[\"Not Found. Check if you made correct request\"] = false;",
							"} else if (responseCode.code === 422){",
							"    tests[\"He instance is not valid\"] = false;",
							"} else {",
							"    tests[\"Semething went wrong. Check response body\"] = false;",
							"}",
							"// Code 200 with switch",
							"switch(responseCode.code){",
							"    case 200:",
							"        tests[\"200 ok. The request has succeeded\"] = true;",
							"        break;",
							"    case 404:",
							"        tests[\"404 Not found\"] = false;",
							"        break;",
							"    case 400:",
							"        tests[\"400 Bad Request\"] = false;",
							"        break;",
							"    case 401:",
							"        tests[\"401 BUnauthorized\"] = false;",
							"        break;",
							"    case 500:",
							"        tests[\"500 Internal Server Error\"] = false;",
							"        break;",
							"    case 503:",
							"        tests[\"503 Server unavailable\"] = false;",
							"        break;",
							"    case 502:",
							"        tests[\"502 bad gateway\"] = false;",
							"        break;",
							"    case 599:",
							"        tests[\"599 Network connect timeout error\"] = false;",
							"        break",
							"    case 408:",
							"        tests[\"408 Request is timeout\"] = false",
							"        break;",
							"    default:",
							"        tests[\"Sorry, we are out of\" + responseCode] = false;",
							"}",
							"// Code 200",
							"tests[\"Response code is 200 OK\"] = responseCode.code === 200;",
							"// Status code is 200 or 201 or 202",
							"pm.test(\"Successful POST request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);",
							"});",
							"// Code 200 + Ok + code json",
							"pm.test(\"Status code is 200, OK, json\", function () {",
							"    pm.response.to.have.status(200);",
							"    pm.response.to.be.ok;",
							"    pm.response.to.be.json;",
							"});",
							"// Response time < 1000ms",
							"pm.test(\"Response time is less than 1000ms\", function () {",
							"  pm.expect(pm.response.responseTime).to.be.below(1000);",
							"});",
							"// Response size < 2000B",
							"pm.test(\"Response size is less than 2000B\", function () {",
							"    pm.expect(pm.response.responseSize).to.be.below(2000);",
							"});",
							"// Status code is 200, OK, and response is JSON",
							"pm.test(\"Status code is 200, OK, and response is JSON\", function () {",
							"    pm.response.to.have.status(200);",
							"    pm.response.to.be.ok;",
							"    pm.response.to.be.json;",
							"});",
							"// Address update",
							"pm.test(\"Address has been updated, OK\", function () {",
							"    pm.response.to.be.json;",
							"    pm.response.to.not.be.error;",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.not.have.jsonBody(\"error\")",
							"    pm.response.to.have.jsonBody({})",
							"});",
							"// In body {} (Need {} in '' = '{}')",
							"pm.test(\"Body matches string '{}'\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"{}\");",
							"});",
							"// Test Header",
							"pm.test(\"Header is correct\", function () {",
							"    pm.response.to.have.header(\"content-type\", \"application/json;charset=utf-8\");",
							"    pm.response.to.have.header(\"server\", \"Pepyaka/1.21.6\");",
							"    pm.response.to.have.header(\"x-content-type-options\", \"nosniff\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"address\": {\n        \"id\": \"{{id}}\",\n        \"fullName\": {\n            \"firstName\": \"{{firstName}}\",\n            \"lastName\": \"{{lastName}}\"\n        },\n        \"company\": \"{{company}}\",\n        \"taxInfo\": {\n            \"id\": null,\n            \"type\": null\n        },\n        \"addressLine1\": \"{{addressLine1}}\",\n        \"addressLine2\": \"{{addressLine2}}\",\n        \"street\": {\n            \"name\": null,\n            \"number\": null\n        },\n        \"city\": \"{{city}}\",\n        \"country\": \"{{country}}\",\n        \"subdivision\": \"{{subdivision}}\",\n        \"zipCode\": \"{{zipCode}}\",\n        \"phoneNumber\": \"{{phoneNumber}}\",\n        \"location\": null\n    },\n    \"setAsDefault\": true,\n    \"fieldMask\": {\n        \"paths\": [\n            \"fullName.firstName\",\n            \"fullName.lastName\",\n            \"company\",\n            \"addressLine1\",\n            \"addressLine2\",\n            \"city\",\n            \"country\",\n            \"zipCode\",\n            \"phoneNumber\",\n            \"setAsDefault\"\n        ]\n    }\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://addresses.wixapps.net/_api/addresses-web/v1/addresses/{{id}}",
					"protocol": "https",
					"host": [
						"addresses",
						"wixapps",
						"net"
					],
					"path": [
						"_api",
						"addresses-web",
						"v1",
						"addresses",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Show Specific Update address",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Status code - 200",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"// Code 200 with if -else",
							"if (responseCode.code === 200){",
							"    tests[\"Backend is available, response code is 200\"] = true;",
							"} else if  (responseCode.code === 401){",
							"    tests[\"Not authorised, check access token or Log in\"] = false;",
							"} else if (responseCode.code === 403){",
							"    tests[\"Forbiden\"] = false;",
							"} else if (responseCode.code === 404){",
							"    tests[\"Not Found. Check if you made correct request\"] = false;",
							"} else if (responseCode.code === 422){",
							"    tests[\"He instance is not valid\"] = false;",
							"} else {",
							"    tests[\"Semething went wrong. Check response body\"] = false;",
							"}",
							"// Code 200 with switch",
							"switch(responseCode.code){",
							"    case 200:",
							"        tests[\"200 ok. The request has succeeded\"] = true;",
							"        break;",
							"    case 404:",
							"        tests[\"404 Not found\"] = false;",
							"        break;",
							"    case 400:",
							"        tests[\"400 Bad Request\"] = false;",
							"        break;",
							"    case 401:",
							"        tests[\"401 BUnauthorized\"] = false;",
							"        break;",
							"    case 500:",
							"        tests[\"500 Internal Server Error\"] = false;",
							"        break;",
							"    case 503:",
							"        tests[\"503 Server unavailable\"] = false;",
							"        break;",
							"    case 502:",
							"        tests[\"502 bad gateway\"] = false;",
							"        break;",
							"    case 599:",
							"        tests[\"599 Network connect timeout error\"] = false;",
							"        break",
							"    case 408:",
							"        tests[\"408 Request is timeout\"] = false",
							"        break;",
							"    default:",
							"        tests[\"Sorry, we are out of\" + responseCode] = false;",
							"}",
							"// Code 200",
							"tests[\"Response code is 200 OK\"] = responseCode.code === 200;",
							"// Status code is 200 or 201 or 202",
							"pm.test(\"Successful POST request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);",
							"});",
							"// Response time < 1000ms",
							"pm.test(\"Response time is less than 1000ms\", function () {",
							"  pm.expect(pm.response.responseTime).to.be.below(1000);",
							"});",
							"// Response size < 2000B",
							"pm.test(\"Response size is less than 2000B\", function () {",
							"    pm.expect(pm.response.responseSize).to.be.below(2000);",
							"});",
							"// Status code is 200, OK, and response is JSON",
							"pm.test(\"Status code is 200, OK, and response is JSON\", function () {",
							"    pm.response.to.have.status(200);",
							"    pm.response.to.be.ok;",
							"    pm.response.to.be.json;",
							"});",
							"// Response should be okay to process",
							"pm.test(\"Response should be okay to process\", function () {",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"    pm.response.to.not.be.error;",
							"    pm.response.to.not.have.jsonBody(\"error\");",
							"});",
							"// After update ID is in response",
							"pm.test(\"After update ID is in response\", () => {",
							"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"id\"));",
							"});",
							"// Response body should be in the correct format",
							"pm.test(\"Response body should be in the correct format after update\", function () {",
							"    let jsonData = pm.response.json();",
							"    pm.expect(jsonData.address).to.be.a(\"object\");",
							"    pm.expect(jsonData.address.id).to.be.a(\"string\");",
							"    pm.expect(jsonData.address.fullName).to.be.a(\"object\");",
							"    pm.expect(jsonData.address.fullName.firstName).to.be.a(\"string\");",
							"    pm.expect(jsonData.address.fullName.lastName).to.be.a(\"string\");",
							"    pm.expect(jsonData.address.country).to.be.a(\"string\");",
							"    pm.expect(jsonData.address.subdivision).to.be.a(\"string\");",
							"    pm.expect(jsonData.address.city).to.be.a(\"string\");",
							"    pm.expect(jsonData.address.zipCode).to.be.a(\"string\");",
							"    pm.expect(jsonData.address.phoneNumber).to.be.a(\"string\");",
							"    pm.expect(jsonData.address.company).to.be.a(\"string\");",
							"    pm.expect(jsonData.address.addressLine1).to.be.a(\"string\");",
							"    pm.expect(jsonData.address.addressLine2).to.be.a(\"string\");",
							"});",
							"// Full body Keys/Values. Entire response is correct",
							"pm.test(\"Entire response is correct\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData.address.id).to.eql(pm.environment.get(\"id\"));",
							"    pm.expect(jsonData.address.fullName.firstName).to.eql(pm.environment.get(\"firstName\"));",
							"    pm.expect(jsonData.address.fullName.lastName).to.eql(pm.environment.get(\"lastName\"));",
							"    pm.expect(jsonData.address.country).to.eql(pm.environment.get(\"country\"));",
							"    pm.expect(jsonData.address.subdivision).to.eql(pm.environment.get(\"subdivision\"));",
							"    pm.expect(jsonData.address.city).to.eql(pm.environment.get(\"city\"));",
							"    pm.expect(jsonData.address.zipCode).to.eql(\"\" + pm.environment.get(\"zipCode\"));",
							"    pm.expect(jsonData.address.phoneNumber).to.eql(pm.environment.get(\"phoneNumber\"));",
							"    pm.expect(jsonData.address.company).to.eql(pm.environment.get(\"company\"));",
							"    pm.expect(jsonData.address.addressLine1).to.eql(pm.environment.get(\"addressLine1\"));",
							"    pm.expect(jsonData.address.addressLine2).to.eql(\"\" + pm.environment.get(\"addressLine2\"));",
							"});",
							"// Tests Header",
							"pm.test(\"Header is correct\", function () {",
							"    pm.response.to.have.header(\"content-type\", \"application/json;charset=utf-8\");",
							"    pm.response.to.have.header(\"server\", \"Pepyaka/1.21.6\");",
							"    pm.response.to.have.header(\"x-content-type-options\", \"nosniff\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://addresses.wixapps.net/_api/addresses-web/v1/addresses/{{id}}",
					"protocol": "https",
					"host": [
						"addresses",
						"wixapps",
						"net"
					],
					"path": [
						"_api",
						"addresses-web",
						"v1",
						"addresses",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete address",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Status code - 200",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"// Code 200 with if -else",
							"if (responseCode.code === 200){",
							"    tests[\"Backend is available, response code is 200\"] = true;",
							"} else if  (responseCode.code === 401){",
							"    tests[\"Not authorised, check access token or Log in\"] = false;",
							"} else if (responseCode.code === 403){",
							"    tests[\"Forbiden\"] = false;",
							"} else if (responseCode.code === 404){",
							"    tests[\"Not Found. Check if you made correct request\"] = false;",
							"} else if (responseCode.code === 422){",
							"    tests[\"He instance is not valid\"] = false;",
							"} else {",
							"    tests[\"Semething went wrong. Check response body\"] = false;",
							"}",
							"// Code 200 with switch",
							"switch(responseCode.code){",
							"    case 200:",
							"        tests[\"200 ok. The request has succeeded\"] = true;",
							"        break;",
							"    case 404:",
							"        tests[\"404 Not found\"] = false;",
							"        break;",
							"    case 400:",
							"        tests[\"400 Bad Request\"] = false;",
							"        break;",
							"    case 401:",
							"        tests[\"401 BUnauthorized\"] = false;",
							"        break;",
							"    case 500:",
							"        tests[\"500 Internal Server Error\"] = false;",
							"        break;",
							"    case 503:",
							"        tests[\"503 Server unavailable\"] = false;",
							"        break;",
							"    case 502:",
							"        tests[\"502 bad gateway\"] = false;",
							"        break;",
							"    case 599:",
							"        tests[\"599 Network connect timeout error\"] = false;",
							"        break",
							"    case 408:",
							"        tests[\"408 Request is timeout\"] = false",
							"        break;",
							"    default:",
							"        tests[\"Sorry, we are out of\" + responseCode] = false;",
							"}",
							"// Code 200",
							"tests[\"Response code is 200 OK\"] = responseCode.code === 200;",
							"// Status code is 200 or 201 or 202",
							"pm.test(\"Successful POST request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);",
							"});",
							"// Response time < 1000ms",
							"pm.test(\"Response time is less than 1000ms\", function () {",
							"  pm.expect(pm.response.responseTime).to.be.below(1000);",
							"});",
							"// Response size < 2000B",
							"pm.test(\"Response size is less than 2000B\", function () {",
							"    pm.expect(pm.response.responseSize).to.be.below(2000);",
							"});",
							"// Status code is 200, OK, and response is JSON",
							"pm.test(\"Status code is 200, OK, and response is JSON\", function () {",
							"    pm.response.to.have.status(200);",
							"    pm.response.to.be.ok;",
							"    pm.response.to.be.json;",
							"});",
							"// Tests Header",
							"pm.test(\"Header is correct\", function () {",
							"    pm.response.to.have.header(\"content-type\", \"application/json;charset=utf-8\");",
							"    pm.response.to.have.header(\"server\", \"Pepyaka/1.21.6\");",
							"    pm.response.to.have.header(\"x-content-type-options\", \"nosniff\");",
							"});",
							"// Response not to be error, to be withBody, not jsonBody Error",
							"pm.test(\"Order has been deleted, OK\", function () {",
							"    pm.response.to.not.be.error;",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"    pm.response.to.be.ok;",
							"    pm.response.to.be.an(\"object\");",
							"    pm.response.to.not.have.jsonBody(\"error\");",
							"    pm.response.to.have.jsonBody({});",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "https://addresses.wixapps.net/_api/addresses-web/v1/addresses/{{id}}",
					"protocol": "https",
					"host": [
						"addresses",
						"wixapps",
						"net"
					],
					"path": [
						"_api",
						"addresses-web",
						"v1",
						"addresses",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete address 2nd time",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Status code - 400",
							"pm.test(\"Status code is 400, OK\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"// Status code is not 200 with if - else",
							"if (responseCode.code === 200){",
							"    tests[\"Backend is available, response code is 200\"] = false;",
							"} else if (responseCode.code === 400){",
							"    tests[\"Bad Request\"] = true;",
							"} else if  (responseCode.code === 401){",
							"    tests[\"Not authorised, check access token or Log in\"] = true;",
							"} else if (responseCode.code === 403){",
							"    tests[\"Forbiden\"] = true;",
							"} else if (responseCode.code === 404){",
							"    tests[\"Not Found. Check if you made correct request\"] = true;",
							"} else if (responseCode.code === 422){",
							"    tests[\"He instance is not valid\"] = true;",
							"} else {",
							"    tests[\"Semething went wrong. Check response body\"] = false;",
							"}",
							"// Code 200 with switch",
							"switch(responseCode.code){",
							"    case 200:",
							"        tests[\"200 ok. The request has succeeded\"] = false;",
							"        break;",
							"    case 404:",
							"        tests[\"404 Not found\"] = true;",
							"        break;",
							"    case 400:",
							"        tests[\"400 Bad Request\"] = true;",
							"        break;",
							"    case 401:",
							"        tests[\"401 BUnauthorized\"] = true;",
							"        break;",
							"    case 500:",
							"        tests[\"500 Internal Server Error\"] = false;",
							"        break;",
							"    case 503:",
							"        tests[\"503 Server unavailable\"] = false;",
							"        break;",
							"    case 502:",
							"        tests[\"502 bad gateway\"] = false;",
							"        break;",
							"    case 599:",
							"        tests[\"599 Network connect timeout error\"] = false;",
							"        break",
							"    case 408:",
							"        tests[\"408 Request is timeout\"] = false",
							"        break;",
							"    default:",
							"        tests[\"Sorry, we are out of\" + responseCode] = false;",
							"}",
							"// Code 400",
							"tests[\"Response code is 400 OK\"] = responseCode.code === 400;",
							"// Response time < 1000ms",
							"pm.test(\"Response time is less than 1000ms\", function () {",
							"  pm.expect(pm.response.responseTime).to.be.below(1000);",
							"});",
							"// Response size < 2000B",
							"pm.test(\"Response size is less than 2000B\", function () {",
							"    pm.expect(pm.response.responseSize).to.be.below(2000);",
							"});",
							"// Tests Header",
							"pm.test(\"Header is correct\", function () {",
							"    pm.response.to.have.header(\"content-type\", \"application/json;charset=utf-8\");",
							"    pm.response.to.have.header(\"server\", \"Pepyaka/1.21.6\");",
							"    pm.response.to.have.header(\"x-content-type-options\", \"nosniff\");",
							"});",
							"// Response should be okay to progress",
							"pm.test(\"response should be okay to process\", function (){",
							"    pm.response.to.be.error;",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"    pm.response.to.not.have.jsonBody(\"error\");",
							"});",
							"// Message is include previous deleted ID",
							"pm.test(\"Message is include previous deleted ID\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"message\", pm.environment.get(\"id\"));",
							"});",
							"// Access by JSON parse",
							"pm.test(\"Message details ID is correct\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData.details.cant_find).to.eql(\"address_id: \" + pm.environment.get(\"id\"));",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "https://addresses.wixapps.net/_api/addresses-web/v1/addresses/{{id}}",
					"protocol": "https",
					"host": [
						"addresses",
						"wixapps",
						"net"
					],
					"path": [
						"_api",
						"addresses-web",
						"v1",
						"addresses",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Check Deleted address",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Status code - 400",
							"pm.test(\"Status code is 400, OK\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"// Status code is not 200 with if - else",
							"if (responseCode.code === 200){",
							"    tests[\"Backend is available, response code is 200\"] = false;",
							"} else if (responseCode.code === 400){",
							"    tests[\"Bad Request\"] = true;",
							"} else if  (responseCode.code === 401){",
							"    tests[\"Not authorised, check access token or Log in\"] = true;",
							"} else if (responseCode.code === 403){",
							"    tests[\"Forbiden\"] = true;",
							"} else if (responseCode.code === 404){",
							"    tests[\"Not Found. Check if you made correct request\"] = true;",
							"} else if (responseCode.code === 422){",
							"    tests[\"He instance is not valid\"] = true;",
							"} else {",
							"    tests[\"Semething went wrong. Check response body\"] = false;",
							"}",
							"// Code 200 with switch",
							"switch(responseCode.code){",
							"    case 200:",
							"        tests[\"200 ok. The request has succeeded\"] = false;",
							"        break;",
							"    case 404:",
							"        tests[\"404 Not found\"] = true;",
							"        break;",
							"    case 400:",
							"        tests[\"400 Bad Request\"] = true;",
							"        break;",
							"    case 401:",
							"        tests[\"401 BUnauthorized\"] = true;",
							"        break;",
							"    case 500:",
							"        tests[\"500 Internal Server Error\"] = false;",
							"        break;",
							"    case 503:",
							"        tests[\"503 Server unavailable\"] = false;",
							"        break;",
							"    case 502:",
							"        tests[\"502 bad gateway\"] = false;",
							"        break;",
							"    case 599:",
							"        tests[\"599 Network connect timeout error\"] = false;",
							"        break",
							"    case 408:",
							"        tests[\"408 Request is timeout\"] = false",
							"        break;",
							"    default:",
							"        tests[\"Sorry, we are out of\" + responseCode] = false;",
							"}",
							"// Code 400",
							"tests[\"Response code is 400 OK\"] = responseCode.code === 400;",
							"// Response time < 1000ms",
							"pm.test(\"Response time is less than 1000ms\", function () {",
							"  pm.expect(pm.response.responseTime).to.be.below(1000);",
							"});",
							"// Response size < 2000B",
							"pm.test(\"Response size is less than 2000B\", function () {",
							"    pm.expect(pm.response.responseSize).to.be.below(2000);",
							"});",
							"// ID Partial match",
							"pm.test(\"ID is in response\", function () {",
							"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"id\"));",
							"});",
							"// Message details ID is correct",
							"pm.test(\"Message details ID is correct\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData.details.cant_find).to.eql(\"address_id: \" + pm.environment.get(\"id\"));",
							"});",
							"// Response should be okay to progress",
							"pm.test(\"response should be okay to process\", function (){",
							"    pm.response.to.be.error;",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"    pm.response.to.be.an(\"object\");",
							"    pm.response.to.not.have.jsonBody(\"error\");",
							"});",
							"// Message is include previously deleted ID",
							"pm.test(\"Message is include previously deleted ID\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"message\", (pm.environment.get(\"id\")));",
							"});",
							"// Tests Header",
							"pm.test(\"Header is correct\", function () {",
							"    pm.response.to.have.header(\"content-type\", \"application/json;charset=utf-8\");",
							"    pm.response.to.have.header(\"server\", \"Pepyaka/1.21.6\");",
							"    pm.response.to.have.header(\"x-content-type-options\", \"nosniff\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://addresses.wixapps.net/_api/addresses-web/v1/addresses/{{id}}",
					"protocol": "https",
					"host": [
						"addresses",
						"wixapps",
						"net"
					],
					"path": [
						"_api",
						"addresses-web",
						"v1",
						"addresses",
						"{{id}}"
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "apikey",
		"apikey": [
			{
				"key": "value",
				"value": "9ErFQlTqspGgxMbDHllN_ZIOHyBTeO4Db6R97tukYeU.eyJpbnN0YW5jZUlkIjoiZjQ2Y2Q1MDItZjcyZi00NGY3LTk2MzgtNWRhMWRlYjBiNGU3IiwiYXBwRGVmSWQiOiIxNTA1Yjc3NS1lODg1LWViMWItYjY2NS0xZTQ4NWQ5YmY5MGUiLCJtZXRhU2l0ZUlkIjoiMjhiNzkzZDYtNTQyNC00MDU4LTgwNDktMDI2YTRkYjAyODJmIiwic2lnbkRhdGUiOiIyMDI0LTAyLTExVDE3OjU2OjUwLjM2N1oiLCJ1aWQiOiI4Y2YzM2JmMi0wOTQxLTQ1NTQtYjQwOS02OTIyZWI3ZjdlYTciLCJkZW1vTW9kZSI6ZmFsc2UsImFpZCI6IjQ2ZjQyZTE2LWJhNTItNGMyMS04YzQyLWJjYmIyMzVmOTg0YyIsImJpVG9rZW4iOiJkY2RiNDZkNC1hMzBiLTA0YWYtMTY3MS01ZmNiOTMwMDljYzgiLCJzaXRlT3duZXJJZCI6ImY5MTRmMTFjLWFhYjMtNDUyNy04ZDRlLWJhYjc2MjE0M2E2MCIsImV4cGlyYXRpb25EYXRlIjoiMjAyNC0wMi0xMVQyMTo1Njo1MC4zNjdaIiwiaGFzVXNlclJvbGUiOmZhbHNlfQ",
				"type": "string"
			},
			{
				"key": "key",
				"value": "Authorization",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}